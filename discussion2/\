#include <time.h>
#include <stdlib.h>
#include <stdio.h>

struct node {

	int val;
	struct node* left;
	struct node* right;
};

struct btree {

	struct node* root;
};

void insert(struct btree* tree, int val) {

	// TODO: Implement insertion.
    printf("Inserting %d into the binary tree.\n", val);
    struct node* head = tree->root;
    while(head)
    {
        if (head == NULL)
        {
            head = malloc(sizeof(struct node));
            head->val = val;
            head->left = NULL;
            head->right = NULL;
        }
        else if (val < head->val)
        {
            head = head->left;
        }
        else if (val >= head->val)
        {
            head = head->right;
        }
    }
}

struct btree* populate(int size) {

	// DO NOT CHANGE OR REUSE THIS LINE!
	srand(time(NULL));

	// TODO: Insert 'size' number of random nodes.
	// Obtain random number using rand()

    struct btree* tree = malloc(sizeof(struct btree));
    int idx = 0;
    for (; idx < size; idx++)
    {
        insert(tree, rand()%100);
    }
	return tree;
}

void printTree(struct btree* tree)
{
    struct node* temp = tree->root;
    while(temp)
    {
        printf("%d\n", temp->val);
    }
}

void freeTree(struct node* Nd)
{
    if (Nd == NULL)
    {
        return;
    }
    else
    {
        freeTree(Nd->left);
        freeTree(Nd->right);
        printf("Freeing %d\n", Nd->val);
        free(Nd);
    }
}

int main(int argc, char** argv) {

	if (argc < 2) {

		printf("Invalid number of args");
		exit(1);
	}

	int size = atoi(argv[1]);

	if (size < 1) {

		printf("Size must be > 0");
		exit(1);
	}

	// Randomly populate a linked list.
	struct btree* tree = populate(size);
    printTree(tree);
    freeTree(tree->root);
	return 0;
}
